[gd_scene load_steps=6 format=3 uid="uid://2v36vresisy6"]

[ext_resource type="Material" uid="uid://72qpaeos0n2n" path="res://materials/floor_dark1.tres" id="1_lb70j"]

[sub_resource type="GDScript" id="GDScript_meeqk"]
script/source = "extends Node3D

var baked = false

@onready var maze_block_24 = load(\"res://mazestuff/maze_block_24.tscn\")

# Called when the node enters the scene tree for the first time.
func _ready():
	pass

func _process(delta):
	pass


func activate(columns=6, rows=12):
	for child in $MazeNavRegion/MazeBlocks.get_children():
		child.queue_free()
	var maze = []
	# gen_maze() returns [] if it failed to generate a valid maze
	while maze == []:
		maze = gen_maze(columns, rows)
	await construct_maze(maze)
	$MazeNavRegion.bake_navigation_mesh()
	


func gen_maze(columns : int, rows : int):
	#region maze base
	var width = 2 * columns + 1
	var length = 2 * rows + 1
	var maze = []
	for y in range(0, length):
		var row = []
		for x in range(0, width):
			row.append(\" \")
		maze.append(row)
	for y in range(0, length):
		for x in range(0, width):
			if x % 2 == 0 and y % 2 == 0:
				maze[y][x] = \"+\"
			elif x % 2 == 0:
				maze[y][x] = \"|\"
			elif y % 2 == 0:
				maze[y][x] = \"-\"
	#endregion
	#region depth first search
	var queue = []
	var visited = []
	var cell_y = 1
	var cell_x = randi_range(0, columns-1) * 2 + 1
	# starting point
	maze[cell_y][cell_x] = \"?\"
	# break wall into maze
	maze[0][cell_x] = \"S\"
	queue.push_back([cell_y, cell_x])
	while len(queue) > 0:
		# this makes sure cells only get added to the que once
		if not visited.has([cell_y, cell_x]):
			queue.push_back([cell_y, cell_x])
		visited.append([cell_y, cell_x])
		var neighbors = []
		if cell_x+2 <= width-2:
			neighbors.append([cell_y, cell_x+2])
		if cell_x-2 > 1:
			neighbors.append([cell_y, cell_x-2])
		if cell_y+2 <= length-2:
			neighbors.append([cell_y+2, cell_x])
		if cell_y-2 > 1:
			neighbors.append([cell_y-2, cell_x])
		var unvisited_neighbors = []
		for n in neighbors:
			if not visited.has(n):
				unvisited_neighbors.append(n)
			#else:
				#print(\"fucnk\")
		if len(unvisited_neighbors) > 0:
			var neighbor = neighbors.pick_random()
			if neighbor[0] == cell_y:
				if neighbor[1] > cell_x:
					maze[cell_y][cell_x+1] = \" \"
				else:
					maze[cell_y][cell_x-1] = \" \"
			else:
				if neighbor[0] > cell_y:
					maze[cell_y+1][cell_x] = \" \"
				else:
					maze[cell_y-1][cell_x] = \" \"
			cell_y = neighbor[0]
			cell_x = neighbor[1]
		else:
			var queue_cell = queue.pop_front()
			cell_y = queue_cell[0]
			cell_x = queue_cell[1]
		#for row in maze:
			#var rowstring = \"\"
			#for c in row:
				#rowstring += c
			#print(rowstring)
		#print(\" \")
	#endregion
	#region break end wall
	var breakable_far_walls = []
	for x in range(0, width):
		if visited.has([length-2, x]):
			breakable_far_walls.append([length-1, x])
	# swear to god
	if len(breakable_far_walls) > 0:
		var exit = breakable_far_walls.pick_random()
		maze[exit[0]][exit[1]] = \"E\"
	else:
		return []
	#endregion
	#region print final maze
	maze[cell_y][cell_x] = \"!\"
	for row in maze:
		var rowstring = \"\"
		for c in row:
			rowstring += c
		print(rowstring)
	print(\" \")
	#endregion
	return maze


func construct_maze(maze):
	var empty_space_chars = [\"?\", \" \", \"!\", \"S\", \"E\"]
	for y in len(maze):
		for x in len(maze[0]):
			if not maze[y][x] in empty_space_chars:
				var maze_block_instance = maze_block_24.instantiate()
				$MazeNavRegion/MazeBlocks.add_child(maze_block_instance)
				maze_block_instance.position = Vector3(
						x * 24,
						0,
						y * 24
				)
			elif maze[y][x] == \"S\":
				var nav_link = NavigationLink3D.new()
				add_child(nav_link)
				nav_link.start_position = Vector3(0, 0, -18)
				nav_link.position = Vector3(
						(x * 24) + 12,
						0,
						(y * 24) + 12
				)
			elif maze[y][x] == \"E\":
				var nav_link = NavigationLink3D.new()
				add_child(nav_link)
				nav_link.start_position = Vector3(0, 0, 18)
				nav_link.position = Vector3(
						(x * 24) + 12,
						0,
						(y * 24) + 12
				)
		await get_tree().create_timer(0.01).timeout



func _on_maze_nav_region_bake_finished() -> void:
	baked = true
"

[sub_resource type="NavigationMesh" id="NavigationMesh_f6lrd"]
resource_local_to_scene = true
border_size = 0.01
agent_height = 5.0
agent_radius = 4.0
agent_max_climb = 0.5

[sub_resource type="PlaneMesh" id="PlaneMesh_opxe0"]
size = Vector2(312, 600)

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_lb70j"]
data = PackedVector3Array(156, 0, 300, -156, 0, 300, 156, 0, -300, -156, 0, 300, -156, 0, -300, 156, 0, -300)

[node name="Maze312x600_24" type="Node3D"]
script = SubResource("GDScript_meeqk")

[node name="MazeNavRegion" type="NavigationRegion3D" parent="."]
navigation_mesh = SubResource("NavigationMesh_f6lrd")

[node name="MazeFloor" type="MeshInstance3D" parent="MazeNavRegion"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 156, 0, 300)
mesh = SubResource("PlaneMesh_opxe0")
surface_material_override/0 = ExtResource("1_lb70j")

[node name="StaticBody3D" type="StaticBody3D" parent="MazeNavRegion/MazeFloor"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="MazeNavRegion/MazeFloor/StaticBody3D"]
shape = SubResource("ConcavePolygonShape3D_lb70j")

[node name="MazeBlocks" type="Node3D" parent="MazeNavRegion"]

[connection signal="bake_finished" from="MazeNavRegion" to="." method="_on_maze_nav_region_bake_finished"]
